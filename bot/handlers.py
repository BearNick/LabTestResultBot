# bot/handlers.py
from aiogram import F, Dispatcher
from aiogram.types import Message, Document, CallbackQuery
from aiogram.fsm.context import FSMContext
import os
from pathlib import Path                  # ‚úÖ
from uuid import uuid4                    # ‚úÖ

from bot.states import Form
from bot.keyboards import language_keyboard, gender_keyboard, dual_pay_keyboard
from bot.config import (
    UPLOAD_FOLDER,
    MAX_PDF_PAGES,
    CRYPTO_ASSET, CRYPTO_PRICE,
    DA_PAY_URL, DA_PRICE_RUB, DA_PRICE_USD, DA_PRICE_EUR,
    # –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:
    STORE_UPLOADS,                        # ‚úÖ
)
from parser.translations import translations
from interpreter.analyze import generate_interpretation

# –ü–∞—Ä—Å–µ—Ä—ã: —Å–Ω–∞—á–∞–ª–∞ Vision, –ø–æ—Ç–æ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ–ª–±—ç–∫
from parser.vision_extract import extract_lab_data_via_vision
from parser.extract_pdf import extract_lab_data_from_pdf

# –ö—Ä–∏–ø—Ç–∞ (–∏–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞—ë–º ¬´–º—è–≥–∫–æ¬ª ‚Äî –±–µ–∑ –ø–∞–¥–µ–Ω–∏–π UX)
from bot.crypto_pay import create_invoice


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _fmt_amount(val, currency: str) -> str:
    """–ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º –ø–æ –≤–∞–ª—é—Ç–µ."""
    if val is None:
        return ""
    try:
        v = float(val)
    except Exception:
        return ""
    if currency == "RUB":
        return f"{int(round(v))} ‚ÇΩ"
    if currency == "USD":
        return f"{v:.2f} $"
    if currency == "EUR":
        return f"{v:.2f} ‚Ç¨"
    if currency.upper() == "USDT":
        return f"{v:.2f} USDT"
    return f"{v:.2f} {currency}"


def _translated_metrics(lab_data: dict, lang: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥ –º–µ—Ç–æ–∫ –∏ –≤—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."""
    tr = translations.get(lang, translations["ru"])
    lines = []
    for k, v in lab_data.items():
        if v is None:
            continue
        label = tr.get(k, k)
        lines.append(f"{label}: {v}")
    return "\n".join(lines) if lines else ""


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –î–∏–∞–ª–æ–≥–∏
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# /start ‚Äî –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language / Elige idioma:",
        reply_markup=language_keyboard()
    )
    await state.set_state(Form.waiting_for_language)


# –í—ã–±–æ—Ä —è–∑—ã–∫–∞
async def set_language(message: Message, state: FSMContext):
    lang_input = message.text.strip()
    lang_map = {
        "üá∑üá∫ –†—É—Å—Å–∫–∏–π": "ru",
        "üá∫üá∏ English": "en",
        "üá™üá∏ Espa√±ol": "es",
    }

    if lang_input not in lang_map:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return

    lang = lang_map[lang_input]
    await state.update_data(language=lang)

    prompts = {
        "ru": "–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:",
        "en": "Please enter your age:",
        "es": "Por favor, ingresa tu edad:",
    }
    await message.answer(prompts[lang])
    await state.set_state(Form.waiting_for_age)


# –í–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞
async def ask_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return

    await state.update_data(age=int(message.text))
    data = await state.get_data()
    lang = data.get("language", "ru")

    prompts = {
        "ru": "–£–∫–∞–∂–∏ –ø–æ–ª:",
        "en": "Select your gender:",
        "es": "Selecciona tu g√©nero:",
    }
    await message.answer(prompts[lang], reply_markup=gender_keyboard(lang))
    await state.set_state(Form.waiting_for_gender)


# –í–≤–æ–¥ –ø–æ–ª–∞
async def ask_gender(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")

    gender_map = {
        "ru": ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"],
        "en": ["male", "female"],
        "es": ["masculino", "femenino"],
    }
    if message.text.lower() not in gender_map[lang]:
        errs = {
            "ru": "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –∫–Ω–æ–ø–æ–∫.",
            "en": "‚ùå Please choose your gender from the buttons.",
            "es": "‚ùå Por favor, selecciona tu g√©nero de los botones.",
        }
        await message.answer(errs[lang])
        return

    await state.update_data(gender=message.text.lower())

    prompts = {
        "ru": "üìÑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å PDF —Å –∞–Ω–∞–ª–∏–∑–∞–º–∏.",
        "en": "üìÑ Now send your lab results as a PDF file.",
        "es": "üìÑ Ahora env√≠a tus an√°lisis en formato PDF.",
    }
    await message.answer(prompts[lang])
    await state.set_state(Form.waiting_for_file)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF-—Ñ–∞–π–ª–∞
async def handle_pdf(message: Message, state: FSMContext):
    document: Document | None = message.document
    data = await state.get_data()
    lang = data.get("language", "ru")

    if not document or not document.file_name.lower().endswith(".pdf"):
        errs = {
            "ru": "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.",
            "en": "‚ö†Ô∏è Please send a PDF file.",
            "es": "‚ö†Ô∏è Por favor, env√≠a un archivo PDF.",
        }
        await message.answer(errs[lang])
        return

    # ‚úÖ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞)
    upload_dir = Path(UPLOAD_FOLDER)
    upload_dir.mkdir(parents=True, exist_ok=True)
    safe_name = f"{uuid4().hex}.pdf"
    file_path = upload_dir / safe_name

    try:
        # 1) –°–∫–∞—á–∏–≤–∞–µ–º PDF
        file_info = await message.bot.get_file(document.file_id)
        await message.bot.download_file(file_info.file_path, destination=str(file_path))

        # –°–æ–æ–±—â–µ–Ω–∏–µ ¬´–ø–æ–ª—É—á–µ–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é¬ª
        saved = {
            "ru": "‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...",
            "en": "‚úÖ Data received, processing...",
            "es": "‚úÖ Datos recibidos, procesando...",
        }
        await message.answer(saved[lang])

        # 2) –ü–∞—Ä—Å–∏–Ω–≥: VISION ‚Üí —Ñ–æ–ª–±—ç–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π
        lab_data = extract_lab_data_via_vision(str(file_path), max_pages=MAX_PDF_PAGES, lang=lang)
        if not lab_data or all(v is None for v in lab_data.values()):
            lab_data = extract_lab_data_from_pdf(str(file_path))

        if not lab_data or all(v is None for v in lab_data.values()):
            errs = {
                "ru": "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ PDF. –ü–æ–ø—Ä–æ–±—É–π –±–æ–ª–µ–µ —á—ë—Ç–∫–∏–π —Å–∫–∞–Ω/–æ—Ä–∏–≥–∏–Ω–∞–ª.",
                "en": "‚ö†Ô∏è Failed to extract data from the PDF. Please try a clearer scan/original.",
                "es": "‚ö†Ô∏è No se pudieron extraer datos del PDF. Intenta con un escaneo m√°s claro/original.",
            }
            await message.answer(errs[lang])
            await state.clear()
            return

        # 3) –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∫–∏)
        extracted_text = _translated_metrics(lab_data, lang)
        if extracted_text:
            heads = {
                "ru": "üìä –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:",
                "en": "üìä Extracted values:",
                "es": "üìä Valores extra√≠dos:",
            }
            await message.answer(f"{heads[lang]}\n{extracted_text}")

        # 4) –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è (—É—á–∏—Ç—ã–≤–∞–µ—Ç age/gender/language + –∑–Ω–∞—á–µ–Ω–∏—è)
        interpretation = generate_interpretation({**data, **lab_data})
        await message.answer(interpretation)

        # 5) –û–ø–ª–∞—Ç–∞: —Å–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å CryptoBot (–µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∑–∞–¥–∞–Ω), –ø–ª—é—Å DonationAlerts
        crypto_url = None
        try:
            payload = f"user:{message.from_user.id}"
            desc_map = {
                "ru": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
                "en": "Support the bot & project development",
                "es": "Apoya el bot y el desarrollo del proyecto",
            }
            invoice = create_invoice(
                amount=CRYPTO_PRICE,
                asset=CRYPTO_ASSET,
                description=desc_map[lang],
                payload=payload,
            )
            if invoice:
                crypto_url = invoice.get("pay_url")
        except Exception:
            crypto_url = None  # —Ç–∏—Ö–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

        # 6) –ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã (RUB + USDT + ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª)
        rub_line = _fmt_amount(DA_PRICE_RUB, "RUB")
        usd_line = _fmt_amount(DA_PRICE_USD, "USD")
        eur_line = _fmt_amount(DA_PRICE_EUR, "EUR")
        usdt_line = _fmt_amount(CRYPTO_PRICE, "USDT")

        pay_text = {
            "ru": f"–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:\n‚Ä¢ RUB: {rub_line}\n‚Ä¢ USD: {usd_line}\n‚Ä¢ EUR: {eur_line}\n‚Ä¢ USDT: {usdt_line}",
            "en": f"Support the project:\n‚Ä¢ RUB: {rub_line}\n‚Ä¢ USD: {usd_line}\n‚Ä¢ EUR: {eur_line}\n‚Ä¢ USDT: {usdt_line}",
            "es": f"Apoya el proyecto:\n‚Ä¢ RUB: {rub_line}\n‚Ä¢ USD: {usd_line}\n‚Ä¢ EUR: {eur_line}\n‚Ä¢ USDT: {usdt_line}",
        }[lang]

        await message.answer(
            pay_text,
            reply_markup=dual_pay_keyboard(lang, DA_PAY_URL, crypto_url),
        )

        # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        await state.update_data(last_lab_data=lab_data)

    except Exception as e:
        errs = {
            "ru": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}",
            "en": f"‚ùå Error processing file: {e}",
            "es": f"‚ùå Error al procesar el archivo: {e}",
        }
        await message.answer(errs[lang])
        await state.clear()

    finally:
        # ‚úÖ –ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ STORE_UPLOADS = False
        try:
            if not STORE_UPLOADS and file_path.exists():
                file_path.unlink()
        except Exception:
            pass


# –ö–æ–ª–ª–±—ç–∫ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–ø–∞—Å–∏–±–æ (–±–µ–∑ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏)
async def cb_paid_any(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")
    thanks = {
        "ru": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –±–æ—Ç–∞ üôå",
        "en": "‚úÖ Thanks for your support! It helps a lot üôå",
        "es": "‚úÖ ¬°Gracias por tu apoyo! Nos ayuda mucho üôå",
    }[lang]
    await call.message.answer(thanks)
    await call.answer("OK")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, F.text == "/start")
    dp.message.register(set_language, Form.waiting_for_language)
    dp.message.register(ask_age, Form.waiting_for_age)
    dp.message.register(ask_gender, Form.waiting_for_gender)
    dp.message.register(handle_pdf, Form.waiting_for_file, F.document)

    # –û–¥–Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª
    dp.callback_query.register(cb_paid_any, F.data == "paid_any")
